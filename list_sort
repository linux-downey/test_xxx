#include <linux/uaccess.h>
#include <linux/module.h>
#include <linux/types.h>
#include <linux/kernel.h>
#include <linux/mm.h>
#include <linux/string.h>
#include <linux/errno.h>
#include <linux/highmem.h>
#include <linux/slab.h>

#include <linux/socket.h>
#include <linux/sockios.h>
#include <linux/in.h>
#include <linux/inet.h>
#include <linux/netdevice.h>
#include <linux/etherdevice.h>
#include <linux/proc_fs.h>
#include <linux/stat.h>
#include <linux/init.h>
#include <asm/kprobes.h>
#include <linux/debugfs.h>
#include <linux/kprobes.h>
#include <net/snmp.h>
#include <net/ip.h>
#include <net/protocol.h>
#include <net/route.h>
#include <net/xfrm.h>
#include <linux/skbuff.h>
#include <net/sock.h>
#include <net/arp.h>
#include <net/icmp.h>

#include <net/checksum.h>
#include <net/inetpeer.h>
#include <net/lwtunnel.h>
#include <linux/bpf-cgroup.h>
#include <linux/igmp.h>
#include <linux/netfilter_ipv4.h>
#include <linux/netfilter_bridge.h>
#include <linux/netlink.h>
#include <linux/tcp.h>

#define VERSION "0.409"

#include <linux/cache.h>
#include <linux/uaccess.h>
#include <linux/bitops.h>
#include <linux/types.h>
#include <linux/kernel.h>
#include <linux/mm.h>
#include <linux/string.h>
#include <linux/socket.h>
#include <linux/sockios.h>
#include <linux/errno.h>
#include <linux/in.h>
#include <linux/inet.h>
#include <linux/inetdevice.h>
#include <linux/netdevice.h>
#include <linux/if_arp.h>
#include <linux/proc_fs.h>
#include <linux/rcupdate.h>
#include <linux/skbuff.h>
#include <linux/netlink.h>
#include <linux/init.h>
#include <linux/list.h>
#include <linux/slab.h>
#include <linux/export.h>
#include <linux/vmalloc.h>

#include <linux/notifier.h>
#include <net/net_namespace.h>
#include <net/ip.h>
#include <net/protocol.h>
#include <net/route.h>
#include <net/tcp.h>
#include <net/sock.h>
#include <net/ip_fib.h>
#include <net/fib_notifier.h>
#include <trace/events/fib.h>

struct exp_info {
        int x;
        struct list_head node;
};

struct record {
        struct list_head head;
        int list_cnt;
};

struct record rec;


static int need_insert(int x)
{
        struct exp_info *info;
        if (rec.list_cnt < 5)
                return 1;
        info = list_last_entry(&rec.head, struct exp_info, node);
        if (x > info->x)
                return 1;
        return 0;
}

void insert_list(struct exp_info *new)
{
        struct exp_info *info;
        struct exp_info *last_node = NULL;
        struct list_head *front = &rec.head;
        list_for_each_entry_reverse(info, &rec.head, node) {
                if (!last_node)
                        last_node = info;
                if (new->x > info->x)
                        continue;
                front = &info->node;
                break;
        }

        list_add(&new->node,front);
        printk("add : x = %d \n", new->x);
        rec.list_cnt++;

        if ((rec.list_cnt > 5) && last_node) {
                list_del(&last_node->node);
                printk("delete : x = %d \n", last_node->x);
                rec.list_cnt--;
                kfree(last_node);
        }
        printk("list_cnt after operation = %d", rec.list_cnt);
}

static int __init print_init(void)
{

        struct exp_info *info;
        struct exp_info *tmp[20];
        int i;

        INIT_LIST_HEAD(&rec.head);

        for (i=0;i<20;i++){
                tmp[i] = (struct exp_info*)kmalloc(sizeof(struct exp_info), GFP_KERNEL);
                tmp[i]->x = i;
                if (1 == need_insert(tmp[i]->x)) {
                        insert_list(tmp[i]);
                }
        }

        for (i=0;i<10;i++){
                tmp[i] = (struct exp_info*)kmalloc(sizeof(struct exp_info), GFP_KERNEL);
                tmp[i]->x = i*2;
                if (1 == need_insert(tmp[i]->x)) {
                        insert_list(tmp[i]);
                }
        }

        list_for_each_entry(info, &rec.head, node) {
                printk("info->x = %d\n", info->x);
        }
        printk("ko init\n");
        return 0;
}

static void __exit print_exit(void)
{

}

module_init(print_init)
module_exit(print_exit)
MODULE_LICENSE("GPL");



